// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model FeedBack {
  id String @id @default(cuid())
  message String
  hidden Boolean @default(false)
  completed Boolean @default(false)
  read Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedBackCategoryID String
  feedBackCategory FeedBackCategory @relation(fields: [feedBackCategoryID], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeedBackCategory {
  id            String    @id @default(cuid())
  name          String @unique
  feedBack      FeedBack[]
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    feedBacks     FeedBack[]
    userSetting   UserSetting?
    leagueOfLegends userLeagueOfLegends?
}

model Role {
    id    String @id @default(cuid())
    name  String @unique
    userMainRole userLeagueOfLegends[]
    champions Champion[]
}

model Champion {
    id                 String                 @id @default(cuid())
    name               String                 @unique
    title              String
    roleId             String
    role               Role                   @relation(fields: [roleId], references: [id], onDelete: Cascade)
    userLeagueSettings userLeagueOfLegends[]
}

model userLeagueOfLegends {
    id            String    @id @default(cuid())
    updatedAt     DateTime  @updatedAt @default(now())
    mainChampionId String?
    mainChampion   Champion? @relation(fields: [mainChampionId], references: [id])
    mainRoleId       String
    mainRole        Role      @relation(fields: [mainRoleId], references: [id], onDelete: Cascade)
    userId        String    @unique
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserSetting {
  id String @id @default(cuid())
  updatedAt DateTime @updatedAt @default(now())

  notification Boolean
  marketNotification Boolean
  updateNotification Boolean
  private Boolean

  themeId String
  languageId String

  userId String @unique

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
}

model Theme {
  id            String    @id @default(cuid())
  name          String  @unique
  userSettings  UserSetting[]
}

model Language {
  id            String    @id @default(cuid())
  name          String  @unique
  userSettings  UserSetting[]
}

model Deck {
  id String @id @default(cuid())
  name String
  description String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards Card[]
}

model Card {
  id String @id @default(cuid())
  question String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  choices CardChoice[]
  typeId String
  type CardType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  deckId String
  deck Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)
}

model CardType {
  id String @id @default(cuid())
  type String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards Card[]
}

model cardChoiceType {
  id String @id @default(cuid())
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cardId String
  cardChoices CardChoice[]
}

model CardChoice {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String?
  image String?
  video String?
  isCorrect Boolean
  typeId String
  type cardChoiceType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  cardId String
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
}